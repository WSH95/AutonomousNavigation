/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class lcm_monitor_odometer implements lcm.lcm.LCMEncodable
{
    public float xLidar;
    public float yLidar;
    public float thetaLidar;
    public float xSE;
    public float ySE;
    public float thetaGyro;
 
    public lcm_monitor_odometer()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xaa43ec7ff3147ed6L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.lcm_monitor_odometer.class))
            return 0L;
 
        classes.add(lcmtypes.lcm_monitor_odometer.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeFloat(this.xLidar); 
 
        outs.writeFloat(this.yLidar); 
 
        outs.writeFloat(this.thetaLidar); 
 
        outs.writeFloat(this.xSE); 
 
        outs.writeFloat(this.ySE); 
 
        outs.writeFloat(this.thetaGyro); 
 
    }
 
    public lcm_monitor_odometer(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public lcm_monitor_odometer(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.lcm_monitor_odometer _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.lcm_monitor_odometer o = new lcmtypes.lcm_monitor_odometer();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.xLidar = ins.readFloat();
 
        this.yLidar = ins.readFloat();
 
        this.thetaLidar = ins.readFloat();
 
        this.xSE = ins.readFloat();
 
        this.ySE = ins.readFloat();
 
        this.thetaGyro = ins.readFloat();
 
    }
 
    public lcmtypes.lcm_monitor_odometer copy()
    {
        lcmtypes.lcm_monitor_odometer outobj = new lcmtypes.lcm_monitor_odometer();
        outobj.xLidar = this.xLidar;
 
        outobj.yLidar = this.yLidar;
 
        outobj.thetaLidar = this.thetaLidar;
 
        outobj.xSE = this.xSE;
 
        outobj.ySE = this.ySE;
 
        outobj.thetaGyro = this.thetaGyro;
 
        return outobj;
    }
 
}

