/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class lcm_monitor_odometer implements lcm.lcm.LCMEncodable
{
    public float odomLidar[];
    public float odomSE[];
    public float thetaGyro;
    public float odomCurrent[];
    public float currentWayPoint[];
 
    public lcm_monitor_odometer()
    {
        odomLidar = new float[3];
        odomSE = new float[3];
        odomCurrent = new float[3];
        currentWayPoint = new float[2];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x91b3c2d6091d67e1L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.lcm_monitor_odometer.class))
            return 0L;
 
        classes.add(lcmtypes.lcm_monitor_odometer.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.odomLidar[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.odomSE[a]); 
        }
 
        outs.writeFloat(this.thetaGyro); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.odomCurrent[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.currentWayPoint[a]); 
        }
 
    }
 
    public lcm_monitor_odometer(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public lcm_monitor_odometer(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.lcm_monitor_odometer _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.lcm_monitor_odometer o = new lcmtypes.lcm_monitor_odometer();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.odomLidar = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.odomLidar[a] = ins.readFloat();
        }
 
        this.odomSE = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.odomSE[a] = ins.readFloat();
        }
 
        this.thetaGyro = ins.readFloat();
 
        this.odomCurrent = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.odomCurrent[a] = ins.readFloat();
        }
 
        this.currentWayPoint = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.currentWayPoint[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.lcm_monitor_odometer copy()
    {
        lcmtypes.lcm_monitor_odometer outobj = new lcmtypes.lcm_monitor_odometer();
        outobj.odomLidar = new float[(int) 3];
        System.arraycopy(this.odomLidar, 0, outobj.odomLidar, 0, 3); 
        outobj.odomSE = new float[(int) 3];
        System.arraycopy(this.odomSE, 0, outobj.odomSE, 0, 3); 
        outobj.thetaGyro = this.thetaGyro;
 
        outobj.odomCurrent = new float[(int) 3];
        System.arraycopy(this.odomCurrent, 0, outobj.odomCurrent, 0, 3); 
        outobj.currentWayPoint = new float[(int) 2];
        System.arraycopy(this.currentWayPoint, 0, outobj.currentWayPoint, 0, 2); 
        return outobj;
    }
 
}

